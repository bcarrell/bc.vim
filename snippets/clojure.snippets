snippet ;;; "line"
;; ============================================================================
;; $1

endsnippet

snippet prn "println" i
(println ${0:${VISUAL}})
endsnippet

snippet ns "namespace"
(ns ${1:name}
	${2})
endsnippet

snippet req "require"
(:require [$1])
endsnippet

snippet defn "defn"
(defn ${1:name} [$2]
	${0:${VISUAL}})
endsnippet

snippet l "let" i
(let [${1:name} ${2:value}]
	${0:${VISUAL}})
endsnippet

snippet defm "defmacro"
(defmacro ${1:name} [${2:args...}]
	${0:{$VISUAL}})
endsnippet

snippet deft "deftemplate"
(html/deftemplate ${1:fn-name} "${2:template.html}" [${3:params}]
	[${4:selector}] (${5:transformations}))
endsnippet

snippet defs "defsnippet"
(html/defsnippet ${1:fn-name} "${2:template.html}" [${3:selector}]
	[${4:params}]
	[${5:selector}] (${6:transformations}))
endsnippet

snippet cl "console log"
(.log js/console ${1:item})
endsnippet

snippet defc "om component"
(defn ${1:name} [data owner]
	(reify
		om/IDisplayName
		(display-name [_] ${2:name})

		om/IRender
		(render [_]
			(html ${3:body}))))
endsnippet
